package cz.vut.feec.xklaso00.groupsignature;

import com.herumi.mcl.Mcl;
import cz.vut.feec.xklaso00.groupsignature.gui.StartWindow;

public class Main {



    static {
        System.loadLibrary("mcljava-x64");


    }
    public static void main(String[] args) {


        Mcl.SystemInit(Mcl.BN254);
        /*cz.vut.feec.xklaso00.semestralproject.Server server= new cz.vut.feec.xklaso00.semestralproject.Server();
        cz.vut.feec.xklaso00.semestralproject.Client client= new cz.vut.feec.xklaso00.semestralproject.Client();

        server.runSetUpOfPaillier();
        BigInteger e1= server.getE1();
        BigInteger e2= client.getE2(e1,server.getPaillierPublicKeyFromServer());
        G1 pubManager= server.computePubManager(e2);
        G1 pubUser= client.computeKeyFromManager(pubManager);
        Fr msg= new Fr(12345);
        client.computeModifiedSchnorrProof(msg);
        boolean legitProof= server.checkProof(client.getGtoR(),client.getSiAph(),client.getSiDash(),msg,client.getE(),client.getSr(),client.getSSki());
        System.out.println("legit sig? " +legitProof);*/
        //MainWindow mainWindow=new MainWindow();
        //FileManagerClass.generateAndSaveGothToFile(4561);
        /*BigInteger mobile=new BigInteger("36773169C88B843CFD15CE76724DC17109C8509F93655330DD80F8B756F931ECC27E29A149CC44B084B454D0FA05F8F7B65698BE2051553DE0196737439D012E170568A796FB0127E99179E108F33A95BAD4CDA04CE2A38C5E6F8A6C1D1F08910B9E5D73BC8CB7D4648796BF1244C302C483B12F70E3F30CC26B986ABFC2EE993F3AD0367CB0CA4F30F4879E9AC814FA27C168AA3003FEC9763A81CF6653BE60AE62AF8D265389F855B0E532845C7CAD7DB4CCFA3D6788C5BF6484D1E7FDB8EB4C28577CF5454BADEACD7BF9BD7F1E3053EA60B1620CDF1EA57F3E705C30FD981C73522EA26766733B0ED7BA85FF428CFFB2C05ACC880F04BD0395B47FE289ACE6FC6B8133834FF2DAA2705BCD072E9C8A97F5E2323CA2E8907B69373C854E67C50AB316460060BAC05930FFA615BF1A5AB51D9EA8F03F81AC293F4E7B8C2F04E16D267250CAFD8597FFAFBB67FF0DBBB368A7940FC4F3405B1C497F937962C4A3E7B670FEF62DBF4EF1C2F34A2CE00126A86790A0FA8E0710AECDCB63CA9F1B60624AFD09338271D6AE489E6BAC9C52890E81939BD6DD80EDFEF76E064CF5738E85777F8DD2EAF45E4B622E5B9BDCA1C428E9AD144466B91316C1C91D89E567F577EFB6A7B768E1E6324F78B3EA8326C70AB42BFB1C9945811635A8D9B5C9ED6771019DE62C15FFC8FAFA5E070EADD50B395D5301D77AD9E7E166272ED8D759625729509E2C1FEC1D65A03EAA9785457E1693598EC616042CC302DAA826EF51C3E9E30A73C8661921B90F44ACBD83885BC34595ABE6B9FEF9508739E01BCD5ACB4CA8EF25EF7EC4B1DDCA34DD796FFB9D1E2D4F62021C279F33923E6948E2E63B9DAA3011781BC7D567754FC238F244F4632140E9F5BAAD506563C09A8AEB1FA17CA6E1A807B8D833CAE1CE2389DAD04B159503C168C304D5EE3D0C993803ED917CBFC4E9844410E7609AA302BDC90283C9107A17FB665FA1A0399C94D380C94EA71D4C1F6D20776A40F9D211A06E22DFFA46C18579E6792BBBB917224871DE2A769575CCD5E38D47094F0AB66D7DA5DFB5CCC2241627400EFFAE5F146DD724BED9B29AFA9E938ACE689752BFB4B6DDE06985F9CC750851A07ACB1EE823370F3FC13075701DDD7132661BD0A464612A77E0A5049C556066793F73571F60A8F63A16BBE4228A2385430D7C24EE55EB66DD7EDBDCD7EC865F0EBD112620A6A5C6C3CD31A38BBB3AFFA32DF3A831AC63AA233EC84BCC219633C7C4F42A9D8697FE4B90ACDBAD24139CB6F3A07D865AF8453CE444D9202F727290B1FC3FDA61E4EFBE445CF241CA70EDD2EABDC954EEAB8E0AE665DB62556436CF3F1AEE70F4468716AAF0F8BFFBD8882C29DB7C7704E619A3B2B36954EC604820289469141994345CD0ACB52161A7B146DD69123B76E13F8231893C35B5FAC45359B8DE15330698347056E3E05002E7702B378827111F466A9948B7799F85B1903B2FA3843F060742BFB7D56D1780CF49881B4065850ADE841E5DCF35EC2EFCF9EB7EBF8E5CD3415346320372B3829DC832322001379A451341DDC10284C0C94FF7683D69A75138276B8584426D667F4CCAF690C32836D6F03DB5D2",16);
        BigInteger re=new BigInteger("3F07C7889AD41FAB90BE6BC39DC299918C9F9834CA880F4E401DE261DE82A5FF0EE3B67B03750342D991F3AE51002D95086695E6E0822B61387C0560DA241CFB3DE0E8975E7653CF9D84796DE479400A1D6EEFD75CEDCD98BD452CA70D848295E07B62893B6858066CDFD3809EB2534D77E20F483EC0006BF5D0D23AC082299FAC401071875669EA1B5A817E54AF31890A1A855AE47E08E950062188AE6655EAD86D879B720B1BBDD421665A7833F5C4C33841EC83D9A51F17237E6BFD3A26A867E0599A68C6C84B4C6FAAB7CB8CF34AB414387E8413859916493E6FB2E3A2E2AE75B0123E5D485DA1FFD0938F11112902F1607D24E2C646C5528024ECEBFDD63F45B6DEC185448082B6779D99089CB1CC951ED1B413E0F553A43E2ED922DD2337C14237E2747959DA38A385347E9196F3C544037C92EA415A045C1D2663B5730037FDB456AD39A717C8CB343ADDE39008B388916BBB65AF4B10FB0928B477579DAD00BF5014B7A1996601B9924B3F304E7E77700B5A8DA9C551F5B11E7DAD0BB99D978E33C394FD7FCA2DF89E00AE61D3A67EBBD3173BB5D9E9169AAC8D6EBF05CC6F96F1FDCC213509D0C44EF1C87F27BB10D7849D0A9795034D513921B9A953521221F1F3BC4D7C39241AAE8DC5FB2A42556B374DB257CEB5D9F21B031C8DE0CE9AE0DFAF2CFFAFE79E353D33E3B781820846622D50F8433B831174060E11301E24D320488A04B61B021020B2FE74DB66352C748120DC39E6F6267DF4B9C3D4529D7A7A773A7F484BBE6D653530FA123CE898407913136A183ED82FF27027B22E4ACDC7A66FD609CE4DAD3EE3A1FC010DCD5A78CCAA0E9BD446C321294FD88EE4665BFFB26CDC9BD043D7240E32A5D27B3C6E9A11ED75E7A18CBC367A4F0010205AA31920A14A4D46DA3FC869B70918E932AD064C138C2ED89C1C8CE7B369BD9B62ED8FB9DE1807AD7AC5E1BA8AAC50CD7608D17BCD433DA607485B07DA07993CE5C9B75B289C82DF8CCCF8090A515D31EF96CF7289D32867D5C6E6E546A22523E98C029EEE6D2E57A9213E46594160D6CD21A524B79D886E44AB53850F809C4975891C17A35B37B62390A3453D5343357205A048838958F8841216FF8411CF0695BCC326A9F0B708809EE0B853CED75843B5B9CFBCBAB35B5FDA6065761C6E99FBAC005D93A97E9E89CF4A641F5CDBEAB6C8C37C4E74DB7565330EA31AE18C1253797BCFC582550F4CD7EA9043ABF88F9D2020988FB6B8C561432F76544CB4145A08FB3DE61E981DAF62F9BE7BC2E40D3E5192FB294CAD4ADAA05B1AD0DFA3AD0CB31FCD8AFAC83BF3708E6070114D508220C45607CEFCBB6113830A717134CC10E4C97E09330F91FB588D0466838D89C7D361F476B49A8B5BF33DDB24F88D7EF253E142D0A508850C562A8DAFB3AEED5A9C953A0AEEC301F9895D75401D47102A15808B42CD7B5A2D985B4287565DFD5F96A39CB8C03C6083753D967D41053B99B8E0D316D0AD7E6AF6C69B910B12CEB9D5AEB79E79C4A8BAB38EA3735D293F03114467B0B7A8A19AC747CC234749443779125FEDB0CC0417FE02C9EE9B905190CA0F410329F248FB89CFE2D4616B4AFD58",16);
        System.out.println("LEN OF MOBILE "+mobile.bitLength());
        System.out.println("LEN of pc"+re.bitLength());
        System.out.println("DIFFERENCE IS " +re.subtract(mobile));*/
        /*long st=System.nanoTime();
        BigInteger p=BigInteger.probablePrime(1024,new SecureRandom());
        long et=System.nanoTime();
        System.out.println("It took "+(et-st)/1000000+" ms");
        BigInteger q=BigInteger.probablePrime(1024,new SecureRandom());
        BigInteger n=p.multiply(q);
        BigInteger g=new BigInteger(2048,new Random());
        BigInteger a=new BigInteger(2048,new Random());
        g=g.mod(n);
        a=a.mod(n);
        st=System.nanoTime();
        g=g.modPow(a,n);
        et=System.nanoTime();
        System.out.println("It took "+(et-st)/1000+" ms");
*/

        new StartWindow();
    }
}